name: Validate version

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for changes in `metadata.yml` and `openapi-rest.yml`
        id: check_changes
        run: |
          # Fetch the base branch and the head branch
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}

          # Check for changes in metadata.yml or openapi-rest.yml
          CHANGED_FILES=$(git diff --name-only ${{ github.base_ref }} ${{ github.head_ref }} -- 'apis/**/api-first/metadata.yml' 'apis/**/api-first/openapi-rest.yml')
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "is_changed=true" >> $GITHUB_ENV
          else
            echo "is_changed=false" >> $GITHUB_ENV
          fi

      - name: Print changed file directories
        if: env.is_changed == 'true'
        run: |
          for FILE in $(git diff --name-only ${{ github.base_ref }} ${{ github.head_ref }} -- 'apis/**/api-first/metadata.yml' 'apis/**/api-first/openapi-rest.yml'); do
            DIR=$(dirname "$FILE")
            echo "Changed directory: $DIR"
          done

      - name: Extract versions from changed directories
        if: env.is_changed == 'true'
        run: |
          # Use the previously stored changed directories
          for DIR in $(git diff --name-only ${{ github.base_ref }} ${{ github.head_ref }} -- 'apis/**/api-first/metadata.yml' 'apis/**/api-first/openapi-rest.yml' | xargs -n1 dirname | sort -u); do
            METADATA_FILE="$DIR/metadata.yml"
            OPENAPI_FILE="$DIR/openapi-rest.yml"

            # Function to extract version and print result
            extract_version() {
              local file="$1"
              local key="$2"
              local version=$(grep "$key" "$file" | awk '{print $2}' | tr -d '\r')
              if [[ -n "$version" ]]; then
                echo "$key from $file: $version"
              else
                echo "$key not found in $file"
              fi
            }

            # Check and extract versions
            [[ -f "$METADATA_FILE" ]] && extract_version "$METADATA_FILE" 'api.version:'
            [[ -f "$OPENAPI_FILE" ]] && extract_version "$OPENAPI_FILE" 'info:' -A 3 | grep 'version:' | awk '{print $2}' | tr -d '\r' | xargs -I {} echo "OpenAPI version from $OPENAPI_FILE: {}" || echo "OpenAPI file not found: $OPENAPI_FILE"
          done
      
      
      

