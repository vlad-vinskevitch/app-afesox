name: Maven CI for Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          else
            echo "GitHub token is set."
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Install yq
        run: |
          sudo add-apt-repository ppa:rmescandon/yq -y
          sudo apt update
          sudo apt install yq -y

      - name: Extract version from OpenAPI YAML
        id: extract_version
        run: |
          VERSION=$(yq e '.info.version' apis/athssox/api-first/openapi-rest.yml)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version already exists
        id: check_version
        run: |
          # Fetch the list of packages from the repository (Replace YOUR_USERNAME and PACKAGE_NAME)
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.APP_AFESOX }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/users/vlad-vinskevitch/packages/maven/app-afesox/versions)

          # Debug: Output the response to check its format
          echo "API Response: $RESPONSE"

          # Ensure the response is a valid JSON array
          if echo "$RESPONSE" | jq empty; then
            # Use jq to check if a version already exists
            PACKAGE_EXISTS=$(echo "$RESPONSE" | jq --arg VERSION "$VERSION" '.[] | select(.name == $VERSION)')
          
            # Check if the package exists
            if [ -n "$PACKAGE_EXISTS" ]; then
              echo "ERROR: A package with version $VERSION already exists. Exiting..."
              exit 1
            else
              echo "No package with version $VERSION exists. Proceeding with deployment."
            fi
          else
            echo "ERROR: API response is not a valid JSON. Exiting..."
            exit 1
          fi


      - name: Build with Maven
        run: mvn clean package

      - name: Deploy with Maven
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          mvn deploy -Dproject.version=$VERSION
