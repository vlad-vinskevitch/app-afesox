name: Maven CI for Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      changed_files: ${{ steps.detect_yaml.outputs.changed_files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Detect changed YAML files
        id: detect_yaml
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.yml$' | grep -v '^\.github/')
          echo "Changed files: $CHANGED_FILES"
          if [ -n "$CHANGED_FILES" ]; then
            echo "::set-output name=changed_files::$CHANGED_FILES"
          else
            echo "No YAML files changed outside of .github directory."
            exit 0  # Exit gracefully if no relevant changes are detected
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.changed_files != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Process and Deploy Changed YAML files
        run: |
          DEPLOYMENT_DONE=false
          CHANGED_FILES="${{ needs.build.outputs.changed_files }}"

          for FILE in $CHANGED_FILES; do
            if [[ $FILE == *"metadata.yml"* ]]; then
              VERSION=$(yq e '.api.version' $FILE)
              NAME=$(yq e '.api.name' $FILE)

              if [ -z "$VERSION" ] || [ -z "$NAME" ]; then
                echo "No version or name found in $FILE. Skipping."
                continue
              fi

              EXECUTIONS=$(yq e '.api.executions[].type' $FILE)
              echo "$EXECUTIONS" > executions.txt

              while IFS= read -r EXECUTION; do
                ARTIFACT_ID="app-afesox-${NAME}-${EXECUTION}-stable"
                echo "Deploying ${NAME} with artifact ID ${ARTIFACT_ID}, version ${VERSION}, and execution type ${EXECUTION}..."
          if mvn clean package -P${EXECUTION} -Dproject.version=${VERSION} && mvn deploy -P${EXECUTION} -Dproject.version=${VERSION} -Dpackage=${ARTIFACT_ID}; then
                            echo "Deployment of ${ARTIFACT_ID} with version ${VERSION} for execution type ${EXECUTION} successful."
                            DEPLOYMENT_DONE=true
                          else
                            echo "Deployment failed. Version ${VERSION} might already be deployed for ${ARTIFACT_ID}."
                          fi
                        done < executions.txt
                      fi
                    done
                    rm -f executions.txt

                    if [ "$DEPLOYMENT_DONE" = false ]; then
                      echo "No deployments were performed. Please check the changed files."
                      exit 1
                    fi