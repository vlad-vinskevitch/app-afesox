name: Maven CI for Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Detect changed YAML files
        id: detect_yaml
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.yml$' | grep -v '^\.github/')
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No YAML files changed outside of .github directory."
            exit 0
          fi
          
          echo "$CHANGED_FILES" > changed_files.txt

      - name: Extract Version, Name, and Executions from Metadata
        id: extract_metadata
        run: |
          CHANGED_FILES=$(cat changed_files.txt)
          
          for FILE in $CHANGED_FILES; do
            if [[ $FILE == *"metadata.yml"* ]]; then
              VERSION=$(yq e '.api.version' $FILE)
              NAME=$(yq e '.api.name' $FILE)
              EXECUTIONS=$(yq e '.api.executions[].type' $FILE)
          
              if [ -z "$VERSION" ] || [ -z "$NAME" ]; then
                echo "No version or name found in $FILE. Skipping."
                continue
              fi
          
              echo "::set-output name=version::$VERSION"
              echo "::set-output name=name::$NAME"
              echo "::set-output name=executions::$EXECUTIONS"
            fi
          done

      - name: Debug Version and Name
        run: |
          VERSION="${{ steps.extract_metadata.outputs.version }}"
          NAME="${{ steps.extract_metadata.outputs.name }}"
          EXECUTIONS="${{ steps.extract_metadata.outputs.executions }}"

          echo "Extracted Version: $VERSION"
          echo "Extracted Name: $NAME"
          echo "Extracted Executions: $EXECUTIONS"

          if [ -z "$VERSION" ]; then
            echo "ERROR: Version not extracted."
            exit 1
          fi

      - name: Run Maven Deployments Based on Executions
        run: |
          VERSION="${{ steps.extract_metadata.outputs.version }}"
          NAME="${{ steps.extract_metadata.outputs.name }}"
          EXECUTIONS="${{ steps.extract_metadata.outputs.executions }}"

          if [ -z "$EXECUTIONS" ]; then
            echo "No execution types found in metadata. Skipping."
            exit 0
          fi

          # Split the executions into an array
          IFS=$'\n' read -r -d '' -a EXECUTIONS_ARRAY <<< "$EXECUTIONS"

          # Loop through the executions and trigger corresponding Maven executions
          for EXECUTION_TYPE in "${EXECUTIONS_ARRAY[@]}"; do
            echo "Processing execution type: $EXECUTION_TYPE"
          
            if mvn clean package -Dproject.version="$VERSION" -P"$EXECUTION_TYPE"; then
              echo "Deployment for execution type $EXECUTION_TYPE successful."
            else
              echo "ERROR: Deployment for execution type $EXECUTION_TYPE failed."
              exit 1
            fi
          done
