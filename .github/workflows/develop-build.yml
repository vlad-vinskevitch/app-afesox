name: Maven CI for Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          else
            echo "GitHub token is set."
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Extract Version from openapi-rest.yml
        id: extract_version
        run: |
          VERSION=$(yq e '.info.version' ./apis/athssox/api-first/openapi-rest.yml)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if Version Already Deployed
        id: check_version
        run: |
          # Fetch the list of versions from the Maven repository
          MAVEN_REPO_URL="https://maven.pkg.github.com/vlad-vinskevitch/app-afesox/com/afesox/app-afesox/maven-metadata.xml"
          RESPONSE=$(curl -s $MAVEN_REPO_URL)
          if echo "$RESPONSE" | grep -q "<version>$VERSION</version>"; then
            echo "ERROR: Version $VERSION is already deployed."
            exit 1
          else
            echo "Version $VERSION is not yet deployed."
          fi

      - name: Build and Deploy with Maven
        run: |
          mvn clean package -Dproject.version=${{ env.VERSION }}
          mvn deploy -Dproject.version=${{ env.VERSION }}
