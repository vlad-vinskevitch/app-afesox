name: Maven CI for Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          else
            echo "GitHub token is set."
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Detect changed YAML files and set environment variables
        id: detect_and_set_env
        run: |
          # Get the list of changed YAML files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.yml$')
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No YAML files changed."
            exit 1
          fi

          # Extract the first changed YAML file
          FIRST_CHANGED_FILE=$(echo "$CHANGED_FILES" | head -n 1)

          # Extract version from the changed YAML file
          VERSION=$(yq e '.info.version' "$FIRST_CHANGED_FILE")
          
          # Log the version for debugging
          echo "VERSION=$VERSION"
          
          # Set environment variables for the next steps
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "CHANGED_FILE=$FIRST_CHANGED_FILE" >> $GITHUB_ENV

      - name: Build and Deploy with Maven
        run: |
          # Check if VERSION is set
          if [ -z "${{ env.VERSION }}" ]; then
            echo "Version not found in YAML file."
            exit 1
          fi

          # Build the project
          mvn clean package -Dproject.version=${{ env.VERSION }}

          # Deploy the project
          if mvn deploy -Dproject.version=${{ env.VERSION }}; then
            echo "Deployment successful."
          else
            echo "Deployment failed. Current version already deployed."
            exit 1
          fi
