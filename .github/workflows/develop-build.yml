name: Maven CI for Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Ensure previous commit is available for comparison

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Detect changed YAML files
        id: detect_yaml
        run: |
          # Detect changed YAML files, excluding any in the `.github` directory
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.yml$' | grep -v '^\.github/')
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No relevant YAML files changed."
            exit 1
          fi

          echo "Changed YAML files:"
          echo "$CHANGED_FILES"

          # Set the changed files list as output
          echo "::set-output name=files::$CHANGED_FILES"

      - name: Extract Version and Package
        id: extract_info
        run: |
          CHANGED_FILES=${{ steps.detect_yaml.outputs.files }}
          echo "Processing changed files:"
          echo "$CHANGED_FILES"
          
          # Initialize variables
          VERSION=""
          PACKAGE_NAME=""

          # Process each changed YAML file
          for FILE in $CHANGED_FILES; do
            FILE="./$FILE"  # Ensure the path is relative from the root
            echo "Processing file: $FILE"
          
            if [[ "$FILE" == *"metadata.yml" ]]; then
              # Extract version and package from metadata.yml
              VERSION=$(yq e '.api.version' "$FILE")
              PACKAGE_NAME=$(yq e '.api.metadata.name' "$FILE")
              echo "Extracted version: $VERSION"
              echo "Extracted name: $PACKAGE_NAME"
            fi
          done

          # Check if version and package are set
          if [ -z "${VERSION}" ] || [ -z "${PACKAGE_NAME}" ]; then
            echo "No version or package found."
            exit 1
          fi

          # Export variables
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "PACKAGE=${PACKAGE_NAME}-stable" >> $GITHUB_ENV

      - name: Build and Deploy with Maven
        run: |
          # Check if the variables are properly set
          if [ -z "${VERSION}" ] || [ -z "${PACKAGE}" ]; then
            echo "VERSION or PACKAGE is not set correctly."
            exit 1
          fi

          echo "Deploying to package: ${PACKAGE} with version: ${VERSION}"
          mvn clean package -Dproject.version=${VERSION}
          
          if mvn deploy -Dproject.version=${VERSION} -Dpackage=${PACKAGE}; then
            echo "Deployment successful."
          else
            echo "Deployment failed. Version ${VERSION} might already be deployed."
            exit 1
          fi
