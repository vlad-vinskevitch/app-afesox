name: Maven CI for Develop

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Ensure previous commit is available for comparison

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Detect changed YAML files
        id: detect_yaml
        run: |
          # Detect changed YAML files, excluding any in the `.github` directory
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.yml$' | grep -v '^\.github/')
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No YAML files changed outside of .github directory."
            exit 0  # Exit gracefully if no relevant changes are detected
          fi
          
          # Output to a temporary file for further processing
          echo "$CHANGED_FILES" > changed_files.txt

      - name: Extract Version, Name, and Deploy for Each Changed File
        run: |
          # Read the changed files list from the temporary file
          CHANGED_FILES=$(cat changed_files.txt)

          # Initialize a flag to detect if any deployment was done
          DEPLOYMENT_DONE=false

          # Loop through each changed file
          for FILE in $CHANGED_FILES; do
            if [[ $FILE == *"metadata.yml"* ]]; then
              # Extract version, name, and execution types from metadata.yml
              VERSION=$(yq e '.api.version' $FILE)
              NAME=$(yq e '.api.name' $FILE)
              EXECUTIONS=$(yq e '.api.executions[].type' $FILE)  # Extract execution types

              # Skip if any required values are not found
              if [ -z "$VERSION" ] || [ -z "$NAME" ] || [ -z "$EXECUTIONS" ]; then
                echo "No version, name, or execution types found in $FILE. Skipping."
                continue
              fi

              # Loop through each execution type
              for EXECUTION_TYPE in $EXECUTIONS; do
                if [ "$EXECUTION_TYPE" == "client" ]; then
                  ARTIFACT_ID="app-afesox-${NAME}-client-stable"
                  echo "Deploying client artifact ${ARTIFACT_ID} with version ${VERSION}..."
                  mvn clean package -Dproject.version=${VERSION} || exit 1
                  if mvn deploy -Dproject.version=${VERSION} -Dpackage=${ARTIFACT_ID}; then
                    echo "Client deployment of ${ARTIFACT_ID} with version ${VERSION} successful."
                    DEPLOYMENT_DONE=true
                  else
                    echo "Client deployment failed. Version ${VERSION} might already be deployed for ${ARTIFACT_ID}."
                  fi
                elif [ "$EXECUTION_TYPE" == "api-first" ]; then
                  ARTIFACT_ID="app-afesox-${NAME}-api-first-stable"
                  echo "Deploying API First artifact ${ARTIFACT_ID} with version ${VERSION}..."
                  mvn clean package -Dproject.version=${VERSION} || exit 1
                  if mvn deploy -Dproject.version=${VERSION} -Dpackage=${ARTIFACT_ID}; then
                    echo "API First deployment of ${ARTIFACT_ID} with version ${VERSION} successful."
                    DEPLOYMENT_DONE=true
                  else
                    echo "API First deployment failed. Version ${VERSION} might already be deployed for ${ARTIFACT_ID}."
                  fi
                else
                  echo "Unknown execution type $EXECUTION_TYPE. Skipping."
                  continue
                fi
              done
            fi
          done

          # Check if any deployment was done
          if [ "$DEPLOYMENT_DONE" = false ]; then
            echo "No deployments were performed. Please check the changed files."
            exit 1
          fi
      
      
