name: Generate Message on Comment

on:
  issue_comment:
    types: [created]

jobs:
  print-message:
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, '/generate') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Post initial comment with workflow link
        id: post-initial-comment
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context.issue.number;
            const run_id = process.env.GITHUB_RUN_ID;
            const repo = context.repo;
            const workflow_run_url = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${run_id}`;
            
            const comment_body = `
            ### Workflow Execution Started
            - **Job Status:** In Progress
            - **[View Workflow Run](${workflow_run_url})**
            `;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue_number,
              body: comment_body,
            });

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Verify GitHub Token Access
        run: |
          if [ -z "${{ secrets.APP_AFESOX }}" ]; then
            echo "ERROR: Secret APP_AFESOX is not set or not accessible."
            exit 1
          fi

      - name: Setup Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${{ github.actor }}</username>
                      <password>${{ secrets.APP_AFESOX }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Parse command and extract name and suffix
        id: parse-command
        run: |
          echo "Comment: ${{ github.event.comment.body }}"
          api_name=$(echo '${{ github.event.comment.body }}' | grep -oP '(?<=--name ")[^"]*')
          suffix=$(echo '${{ github.event.comment.body }}' | grep -oP '(?<=--suffix ")[^"]*')
          echo "::set-output name=api_name::$api_name"
          echo "::set-output name=suffix::$suffix"

      - name: Read metadata and find api-spec-type and definition-path
        id: find-api-spec
        run: |
          api_name="${{ steps.parse-command.outputs.api_name }}"
          echo "Looking for API name: $api_name"
          api_spec_type=$(yq eval ".apis[] | select(.name == \"$api_name\") | .api-spec-type" ./apis/metadata.yml)
          definition_path=$(yq eval ".apis[] | select(.name == \"$api_name\") | .definition-path" ./apis/metadata.yml)
          echo "Found api-spec-type: $api_spec_type"
          echo "Found definition-path: $definition_path"
          echo "::set-output name=api_spec_type::$api_spec_type"
          echo "::set-output name=definition_path::$definition_path"

      - name: Read additional metadata from definition-path
        id: read-definition-metadata
        run: |
          definition_path="${{ steps.find-api-spec.outputs.definition_path }}"
          metadata_file="./apis/${definition_path}/metadata.yml"
          version=$(yq eval '.api.version' $metadata_file)
          name=$(yq eval '.api.name' $metadata_file)

          echo "Found version: $version"
          echo "Found name: $name"
          echo "::set-output name=api_version::$version"
          echo "::set-output name=api_name::$name"

      - name: Export Environment Variables
        run: |
          echo "VERSION=${{ steps.read-definition-metadata.outputs.api_version }}" >> $GITHUB_ENV
          echo "NAME=${{ steps.read-definition-metadata.outputs.api_name }}" >> $GITHUB_ENV
          echo "ARTIFACT_ID=app-afesox-${{ steps.read-definition-metadata.outputs.api_name }}-${{ steps.find-api-spec.outputs.api_spec_type }}-${{ steps.parse-command.outputs.suffix }}-unstable" >> $GITHUB_ENV
          echo "API_SPEC_TYPE=${{ steps.find-api-spec.outputs.api_spec_type }}" >> $GITHUB_ENV

      - name: Package the Project
        run: |
          mvn clean package -P${{ env.API_SPEC_TYPE }} -Dproject.version=${{ env.VERSION }} -Dmaven.wagon.http.ssl.insecure=true || exit 1

      - name: Deploy the Project
        run: |
          mvn clean deploy -P${{ env.API_SPEC_TYPE }} -Dproject.version=${{ env.VERSION }} -Dpackage=${{ env.ARTIFACT_ID }} -DskipTests=true -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/vlad-vinskevitch/app-afesox || exit 1

#      - name: Construct Maven Dependency String
#        id: construct-dependency
#        run: |
#          echo "Maven Dependency: <dependency>" >> dependency.txt
#          echo "  <groupId>com.example</groupId>" >> dependency.txt
#          echo "  <artifactId>${{ env.ARTIFACT_ID }}</artifactId>" >> dependency.txt
#          echo "  <version>${{ env.VERSION }}</version>" >> dependency.txt
#          echo "</dependency>" >> dependency.txt
#          echo "::set-output name=dependency_string::$(cat dependency.txt)"
#
#      - name: Post Maven Dependency as Comment
#        uses: actions/github-script@v6
#        with:
#          script: |
#            const issue_number = context.issue.number;
#            const dependency_string = '${{ steps.construct-dependency.outputs.dependency_string }}';
#            const comment_body = `
#            ### Maven Dependency
#            \`\`\`xml
#            ${dependency_string}
#            \`\`\`
#            `;
#            await github.rest.issues.createComment({
#              ...context.repo,
#              issue_number: issue_number,
#              body: comment_body,
#            });
